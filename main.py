import telebot
from telebot import types
import psycopg2 as ps
import os
from dotenv import load_dotenv

load_dotenv()

bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_name = os.getenv('DB_NAME')
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')

winner = ''  # –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
map_type = ''  # –∫–∞—Ä—Ç–∞
win_rate = ''  # —Ä–µ—Ç–∏–Ω–≥ –ø–æ–±–µ–¥
not_winners = []
maps = ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è', '–∑–µ–ª–µ–Ω–∞—è', '—Å–∏–Ω—è—è']
bot = telebot.TeleBot(bot_token)

def create_connection():
    connection = None
    try:
        connection = ps.connect(
            database=db_name,
            user=db_user,
            password=db_password,
            host=db_host,
            port=db_port
        )
        print("connection to postgres successful")
    except ps.OperationalError as e:
        print(f"error {e}")

    return connection


def init_db():
    conn = create_connection()
    cur = conn.cursor()

    cur.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'gamestat'
        );
    """)
    gamestat_exists = cur.fetchone()[0]

    cur.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'playerstat'
        );
    """)
    playerstat_exists = cur.fetchone()[0]

    if not gamestat_exists or not playerstat_exists:
        req1 = '''
        CREATE TABLE IF NOT EXISTS gamestat(
            game_id SERIAL PRIMARY KEY,
            winner VARCHAR(255) NOT NULL,
            map_type VARCHAR(255) NOT NULL,
            winner_rate INT
        );
        '''

        req2 = '''
        CREATE TABLE IF NOT EXISTS playerstat(
            player_name VARCHAR(255) NOT NULL PRIMARY KEY,
            average_winrate REAL,
            number_of_victory INTEGER,
            number_of_games INTEGER
        );
        '''

        cur.execute(req1)
        cur.execute(req2)

    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    init_db()
    bot.send_message(message.chat.id, "–±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ")
    bot.send_message(message.chat.id, "–±–æ—Ç –∂–¥–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=["photo", "document"])
def send_welcome(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É', reply_markup=types.ReplyKeyboardRemove())
    fist_step(message)


@bot.message_handler(commands=['register_game'])
def register_game(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É')
    fist_step(message)


@bot.message_handler(commands=['what_map'])
def what_map(message):
    conn = create_connection()
    cur = conn.cursor()

    req = '''
        SELECT map_type, COUNT(map_type) AS count_value
        FROM (
            SELECT map_type
            FROM gamestat
            ORDER BY game_id DESC
            LIMIT 10
        ) AS last_ten_records
        GROUP BY map_type
        ORDER BY count_value ASC
        LIMIT 1;
    '''

    cur.execute(req)
    unpopular_map = cur.fetchall()
    print(unpopular_map)
    conn.commit()
    cur.close()
    conn.close()

    if unpopular_map:
        map_type = unpopular_map[0][0]
        print(map_type)
        if map_type == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è':
            message_text = "üèÜ–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç—É –≤ –Ω–æ–≤–æ–π –∏–≥—Ä—ã!"
        elif map_type == '–∑–µ–ª–µ–Ω–∞—è':
            message_text = "üå≥–ó–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ç–∞–∫—Ç–∏–∫–∞!"
        elif map_type == '—Å–∏–Ω—è—è':
            message_text = "üåä–°–∏–Ω—è—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –º–æ—Ä–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!"
        else:
            message_text = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ."

        bot.send_message(message.chat.id, message_text, reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç—É.")


@bot.message_handler(commands=['games_statistics'])
def games_statistics(message):
    conn = create_connection()
    cur = conn.cursor()

    cur.execute("SELECT COUNT(*) FROM gamestat;")
    total_games = cur.fetchone()[0]

    cur.execute("SELECT map_type, COUNT(*) FROM gamestat GROUP BY map_type;")
    map_types = cur.fetchall()

    cur.execute("""
        SELECT map_type, COUNT(*) AS wins 
        FROM gamestat 
        GROUP BY map_type 
        ORDER BY wins DESC 
        LIMIT 3;
    """)
    top_maps = cur.fetchall()

    cur.execute("""
        SELECT winner, COUNT(*) AS wins 
        FROM gamestat 
        GROUP BY winner 
        ORDER BY wins DESC 
        LIMIT 3;
    """)
    top_winners = cur.fetchall()

    conn.commit()
    cur.close()
    conn.close()

    response = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:

–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {total_games}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç:
"""

    for map_type, count in map_types:
        response += f"{map_type}: {count}\n"

    response += "\n–¢–æ–ø-3 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n"

    for winner, wins in top_winners:
        response += f"{winner}: {wins} –ø–æ–±–µ–¥\n"

    bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['players_statistics'])
def players_statistics(message):
    conn = create_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT player_name, number_of_victory 
        FROM playerstat
        ORDER BY number_of_victory DESC 
        LIMIT 3;
    """)
    top_players = cur.fetchall()

    conn.commit()
    cur.close()
    conn.close()

    response = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥:\n\n"

    for player_name, victories in top_players:
        response += f"{player_name}: {victories} –ø–æ–±–µ–¥\n"

    bot.send_message(message.chat.id, response)
#---------------
    conn = create_connection()
    cur = conn.cursor()

    cur.execute("""
        SELECT player_name, average_winrate 
        FROM playerstat 
        ORDER BY average_winrate DESC 
        LIMIT 3;
    """)
    top_players_by_winrate = cur.fetchall()

    conn.commit()
    cur.close()
    conn.close()

    response = "üìà –õ–∏–¥–µ—Ä—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–±–µ–¥–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"

    for player_name, winrate in top_players_by_winrate:
        response += f"{player_name}: {winrate:.2f}\n"

    bot.send_message(message.chat.id, response)
#------------------
    conn = create_connection()
    cur = conn.cursor()
    cur.execute("SELECT player_name, average_winrate, number_of_victory, number_of_games "
                "FROM playerstat;")
    players_stats = cur.fetchall()

    conn.commit()
    cur.close()
    conn.close()

    response = "üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n\n"

    for player_name, winrate, victories, games in players_stats:
        if games > 0:
            win_percentage = (victories / games) * 100
        else:
            win_percentage = 0

        response += (f"–ò–≥—Ä–æ–∫: {player_name}\n"
                     f"–°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {winrate:.2f}\n"
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {victories}\n"
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games}\n"
                     f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_percentage:.2f}%\n\n")

    bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())

def fist_step(message):
    global not_winners
    not_winners = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    conn = create_connection()
    cur = conn.cursor()
    select_req = '''
            SELECT player_name FROM playerstat;
        '''
    cur.execute(select_req)
    names = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    for i in range(0, len(names), 2):
        row_buttons = []
        row_buttons.append(types.KeyboardButton(names[i][0]))
        if i + 1 < len(names):
            row_buttons.append(types.KeyboardButton(names[i + 1][0]))
        markup.row(*row_buttons)

    bot.send_message(message.chat.id, '–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª?', reply_markup=markup)
    bot.register_next_step_handler(message, reg_winner)


def reg_winner(message):
    global winner
    winner = message.text.lower()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')
    markup.add(item1)
    item2 = types.KeyboardButton('–°–∏–Ω—è—è –∫–∞—Ä—Ç–∞')
    markup.add(item2)
    item3 = types.KeyboardButton('–ó–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∞')
    markup.add(item3)
    bot.send_message(message.from_user.id, "–ö–∞–∫–∞—è –∫–∞—Ä—Ç–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, reg_map)


def reg_map(message):
    global map_type

    if message.text == '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞':
        map_type = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
    elif message.text == '–°–∏–Ω—è—è –∫–∞—Ä—Ç–∞':
        map_type = '—Å–∏–Ω—è—è'
    elif message.text == '–ó–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∞':
        map_type = '–∑–µ–ª–µ–Ω–∞—è'

    bot.send_message(message.from_user.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, reg_win_rate)


def reg_win_rate(message):
    global win_rate
    win_rate = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key1 = types.KeyboardButton('–î–∞')
    key2 = types.KeyboardButton('–ù–µ—Ç')
    markup.add(key1, key2)
    bot.send_message(message.from_user.id, f'–ø–æ–±–µ–¥–∏–ª {winner} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {win_rate} –Ω–∞ {map_type} –∫–∞—Ä—Ça')
    bot.send_message(message.chat.id, '–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=markup)
    bot.register_next_step_handler(message, reg_game)


def reg_game(message):
    if message.text.lower() == '–¥–∞':
        reg_game_to_db(message)
    elif message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
        fist_step(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –î–∞ –∏–ª–∏ –ù–µ—Ç')
        bot.register_next_step_handler(message, reg_game)


def reg_game_to_db(message):
    conn = create_connection()
    cur = conn.cursor()
    req = '''
        INSERT INTO gamestat (winner, map_type, winner_rate)
        VALUES(%s, %s, %s);
    '''
    records_to_insert = (winner, map_type, win_rate)
    cur.execute(req, records_to_insert)
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    conn = create_connection()
    cur = conn.cursor()
    select_req = f'''
        SELECT player_name 
        FROM playerstat
        WHERE player_name != '{winner}';
    '''
    cur.execute(select_req)
    names = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(names), 2):
        row_buttons = []
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
        row_buttons.append(types.KeyboardButton(names[i][0]))  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞
        if i + 1 < len(names):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞
            row_buttons.append(types.KeyboardButton(names[i + 1][0]))  # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞
        markup.row(*row_buttons)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏

    item_not = types.KeyboardButton('–ë–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ')
    markup.add(item_not)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ"

    bot.send_message(message.chat.id, '–ö—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∏–≥—Ä–µ?', reply_markup=markup)
    bot.register_next_step_handler(message, ask_other_players)


def ask_other_players(message):
    global not_winners
    if message.text.lower() != '–±–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ':
        if message.text not in not_winners:
            not_winners.append(message.text.lower())
        else:
            bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ')
            return show_player_selection(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        if len(not_winners) >= 4:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 4 –∏–≥—Ä–æ–∫–∞. –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å.")
            print(not_winners)
            reg_player_to_db(message)
            return

    else:
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—é", reply_markup=types.ReplyKeyboardRemove())
        print(not_winners)
        reg_player_to_db(message)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
    show_player_selection(message)


def show_player_selection(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    conn = create_connection()
    cur = conn.cursor()
    select_req = f'''
        SELECT player_name 
        FROM playerstat
        WHERE player_name != '{winner}';
    '''
    cur.execute(select_req)
    names = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    row_buttons = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    for name in names:
        player_name = name[0].lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if player_name not in not_winners:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω
            row_buttons.append(types.KeyboardButton(name[0]))
            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —É–∂–µ 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–∞–∑–º–µ—Ç–∫—É –∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            if len(row_buttons) == 2:
                markup.add(*row_buttons)
                row_buttons.clear()

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if row_buttons:
        markup.add(*row_buttons)

    item_not = types.KeyboardButton('–ë–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ')
    markup.add(item_not)

    bot.send_message(message.chat.id, '–ö—Ç–æ –µ—â—ë?', reply_markup=markup)
    bot.register_next_step_handler(message, ask_other_players)

def reg_player_to_db(message):
    global win_rate
    conn = create_connection()
    cur = conn.cursor()
    get_winner_stat = f'''
        SELECT average_winrate, number_of_victory, number_of_games
        FROM playerstat
        WHERE player_name = '{winner}';
    '''
    insert_winner = '''
        INSERT INTO playerstat(player_name, average_winrate, number_of_victory, number_of_games)
        VALUES(%s, %s, %s, %s)
    '''
    update_winner = '''
        UPDATE playerstat 
        SET 
        average_winrate = %s,
        number_of_victory = %s,
        number_of_games = %s
        WHERE player_name = %s;
    '''
    get_player_stat = '''
        SELECT number_of_games
        FROM playerstat
        WHERE player_name = %s;
    '''
    insert_player_stat = '''
        INSERT INTO playerstat (player_name, average_winrate, number_of_victory, number_of_games) 
        VALUES (%s, %s, %s, %s)
    '''
    update_player_stat = '''
        UPDATE playerstat SET
        number_of_games = %s
        WHERE player_name = %s;
    '''
    cur.execute(get_winner_stat)
    stat = cur.fetchall()
    if not stat:
        data = (winner, win_rate, 1, 1)
        cur.execute(insert_winner, data)
    else:
        current_average_winrate = float(stat[0][0])
        current_number_of_victories = int(stat[0][1])
        current_number_of_games = int(stat[0][2])
        win_rate = float(win_rate)
        if current_average_winrate == 0:
            new_average_winrate = win_rate
        else:
            new_average_winrate = (current_average_winrate + win_rate) / 2
        data = (new_average_winrate, current_number_of_victories + 1, current_number_of_games + 1, winner)
        cur.execute(update_winner, data)

    for rec in not_winners:
        cur.execute(get_player_stat, (rec,))
        stat = cur.fetchone()

        if stat:
            current_games = stat[0] + 1
            dat = (current_games, rec)
            cur.execute(update_player_stat, dat)
        else:
            dat = (rec, 0, 0, 1)
            cur.execute(insert_player_stat, dat)

    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, "–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∏ —Å—Ç–∞—Ç–∏—á—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                     reply_markup=types.ReplyKeyboardRemove())


# bot.polling(none_stop=True, timeout=123)
bot.infinity_polling()
